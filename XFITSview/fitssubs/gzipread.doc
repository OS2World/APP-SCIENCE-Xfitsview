                          Description of gzip decompression

Inflate deflated (PKZIP's method 8 compressed) data.  The compression
method searches for as much of the current string of bytes (up to a
length of 258) in the previous 32K bytes.  If it doesn't find any
matches (of at least length 3), it codes the next byte.  Otherwise, it
codes the length of the matched string and its distance backwards from
the current position.  There is a single Huffman code that codes both
single bytes (called "literals") and match lengths.  A second Huffman
code codes the distance information, which follows a length code.  Each
length or distance code actually represents a base value and a number
of "extra" (sometimes zero) bits to get to add to the base value.  At
the end of each deflated block is a special end-of-block (EOB) literal/
length code.  The decoding process is basically: get a literal/length
code; if EOB then done; if a literal, emit the decoded byte; if a
length then get the distance and emit the referred-to bytes from the
sliding window of previously emitted data.

   There are (currently) three kinds of inflate blocks: stored, fixed, and
dynamic.  The compressor deals with some chunk of data at a time, and
decides which method to use on a chunk-by-chunk basis.  A chunk might
typically be 32K or 64K.  If the chunk is uncompressible, then the
"stored" method is used.  In this case, the bytes are simply stored as
is, eight bits per byte, with none of the above coding.  The bytes are
preceded by a count, since there is no longer an EOB code.

   If the data is compressible, then either the fixed or dynamic methods
are used.  In the dynamic method, the compressed data is preceded by
an encoding of the literal/length and distance Huffman codes that are
to be used to decode this block.  The representation is itself Huffman
coded, and so is preceded by a description of that code.  These code
descriptions take up a little space, and so for small blocks, there is
a predefined set of codes, called the fixed codes.  The fixed method is
used if the block codes up smaller that way (usually for quite small
chunks), otherwise the dynamic method is used.  In the latter case, the
codes are customized to the probabilities in the current block, and so
can code it much better than the pre-determined fixed codes.
 
   The Huffman codes themselves are decoded using a mutli-level table
lookup, in order to maximize the speed of decoding plus the speed of
building the decoding tables.  See the comments below that precede the
lbits and dbits tuning parameters.

   Notes beyond the 1.93a appnote.txt:
   1. Distance pointers never point before the beginning of the output
     stream.
  2. Distance pointers can point back across blocks, up to 32k away.
  3. There is an implied maximum of 7 bits for the bit length table and
     15 bits for the actual data.
  4. If only one code exists, then it is encoded using one bit.  (Zero
     would be more efficient, but perhaps a little confusing.)  If two
     codes exist, they are coded using one bit each (0 and 1).
  5. There is no way of sending zero distance codes--a dummy must be
     sent if there are none.  (History: a pre 2.0 version of PKZIP would
     store blocks with no distance codes, but this was discovered to be
     too harsh a criterion.)  Valid only for 1.93a.  2.04c does allow
     zero distance codes, which is sent as one code of zero bits in
     length.
  6. There are up to 286 literal/length codes.  Code 256 represents the
     end-of-block.  Note however that the static length tree defines
     288 codes just to fill out the Huffman codes.  Codes 286 and 287
     cannot be used though, since there is no length base or extra bits
     defined for them.  Similarly, there are up to 30 distance codes.
     However, static trees define 32 codes (all 5 bits) to fill out the
     Huffman codes, but the last two had better not show up in the data.
  7. Unzip can check dynamic Huffman blocks for complete code sets.
     The exception is that a single code would not be complete (see #4).
  8. The five bits following the block type is really the number of
     literal codes sent minus 257.
  9. Length codes 8,16,16 are interpreted as 13 length codes of 8 bits
     (1+6+6).  Therefore, to output three times the length, you output
     three codes (1+1+1), whereas to output four times the same length,
     you only need two codes (1+3).  Hmm.
 10. In the tree reconstruction algorithm, Code = Code + Increment
     only if BitLength(i) is not zero.  (Pretty obvious.)
 11. Correction: 4 Bits: # of Bit Length codes - 4     (4 - 19)
 12. Note: length code 284 can represent 227-258, but length code 285
     really is 258.  The last length deserves its own, short code
     since it gets used a lot in very redundant files.  The length
     258 is special since 258 - 3 (the min match length) is 255.
 13. The literal/length and distance code bit lengths are read as a
     single stream of lengths.  It is possible (and advantageous) for
     a repeat code (16, 17, or 18) to go across the boundary between
     the two sets of lengths.
